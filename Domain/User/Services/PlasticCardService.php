<?php

namespace App\Domain\User\Services;

use App\Domain\Core\Api\CardService\BindCard\Model\BindCardService;
use App\Domain\Core\Main\Entities\Entity;
use App\Domain\Core\Main\Services\BaseService;
use App\Domain\User\Entities\PlasticCard;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\ValidationException;

class PlasticCardService extends BaseService
{
    public function getEntity(): Entity
    {
        return new PlasticCard();
    }

    protected function attach($object, $object_data)
    {
        $key = "user_id";
        $this->attachSafely($object, 'user', $object_data[$key], $key);
    }

    protected function attachSafely($object, $attaching, $attached, $key)
    {
        $query = $object->$attaching();
        if (!$query->where($key, $attached)->exists()) {
            $query->attach($attached);
        } else {
            throw new \Exception("Карта уже имееться");
        }
    }

    public function create(array $object_data)
    {
        // dd($object_data);
        $this->validating($object_data, [
            'card_number' => "required",
        ]);
        Log::info($object_data);

        try {

            DB::beginTransaction();
            if (!isset($object_data['plastic_data'])) {
                $this->validating($object_data, [
                    'transaction_id' => "required",
                    'code' => "required"
                ]);
                $service = new BindCardService();
                $result = $service->apply($object_data["transaction_id"], $object_data['code'])['data'];
            } else {
                Log::info($object_data);
                $result = $object_data['plastic_data']['data'];
                unset($object_data['plastic_data']);
            }
            Log::info($result);
            $object_data = array_merge($object_data, $result);
            // dd($object_data);
            // here we are updating or creating , because there is no meaning ,
            // storing two identical cards in db
            $object = parent::updateOrCreate(['card_token' => $result['card_token']], $object_data);
            $this->attach($object, $object_data);
            DB::commit();
            return $object;
        } catch (\Exception $exception) {
            DB::rollBack();
            throw ValidationException::withMessages([
                "message" => $exception->getMessage()
            ]);
        }
    }

    public function destroy($object): bool
    {
        return $this->transaction(function () use ($object) {
            $service = new BindCardService();
            // $service->remove_card($object->card_token, );
            return parent::destroy($object); // TODO: Change the autogenerated stub
        });
    }
}
